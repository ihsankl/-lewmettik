{"version":3,"file":"puppeteer.js","names":["userDir","path","resolve","twitDir","fromTwitter","req","res","next","setTimeout","cluster","Cluster","launch","concurrency","CONCURRENCY_CONTEXT","maxConcurrency","puppeteerOptions","userDataDir","monitor","timeout","task","page","data","img","link","process","env","FB_USER","FB_PASS","IG_USER","IG_PASS","caption","fs","unlinkSync","console","log","body","execute","status","HttpStatus","ACCEPTED","send","message","error","idle","close"],"sources":["../../src/controllers/puppeteer.js"],"sourcesContent":["/* eslint-disable no-return-await */\nimport HttpStatus from 'http-status-codes';\nimport { getTwitImg, postToFacebook, postToInstagram } from '../services/puppeteerServices';\nimport { Cluster } from \"puppeteer-cluster\";\nimport path from 'path';\nimport fs from 'fs';\n\nconst userDir = path.resolve('./userDataDir');\nconst twitDir = path.resolve('./twitter');\n\n/**\n * Get all users.\n *\n * @param {Object} req\n * @param {Object} res\n * @param {Function} next\n */\n// eslint-disable-next-line require-await\nexport const fromTwitter = async (req, res, next) => {\n    req.setTimeout(300000);\n    const cluster = await Cluster.launch({\n        concurrency: Cluster.CONCURRENCY_CONTEXT,\n        maxConcurrency: 1,\n        puppeteerOptions: {\n            userDataDir: userDir,\n        },\n        monitor: true,\n        timeout: 300000,\n    });\n\n    // define your task (in this example we extract the title of the given page)\n    await cluster.task(async ({ page, data }) => {\n        const img = await getTwitImg(page, data.link);\n\n        await postToFacebook(page, process.env.FB_USER, process.env.FB_PASS, img);\n\n        await postToInstagram(page, process.env.IG_USER, process.env.IG_PASS, img, data.caption);\n\n        // delete image after successful post\n        await fs.unlinkSync(twitDir + '/' + img);\n\n    });\n\n    // eslint-disable-next-line no-console\n    console.log('Queued. Thank you!');\n    try {\n        // eslint-disable-next-line no-console\n        const data = req.body;\n\n        await cluster.execute(data);\n\n        res.status(HttpStatus.ACCEPTED).send({ message: \"Queued. Thank you!\" });\n\n    } catch (error) {\n        next(error);\n    } finally {\n        await cluster.idle();\n        await cluster.close();\n    }\n}"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AALA;AAOA,MAAMA,OAAO,GAAGC,cAAKC,OAAL,CAAa,eAAb,CAAhB;;AACA,MAAMC,OAAO,GAAGF,cAAKC,OAAL,CAAa,WAAb,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAME,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;EACjDF,GAAG,CAACG,UAAJ,CAAe,MAAf;EACA,MAAMC,OAAO,GAAG,MAAMC,0BAAQC,MAAR,CAAe;IACjCC,WAAW,EAAEF,0BAAQG,mBADY;IAEjCC,cAAc,EAAE,CAFiB;IAGjCC,gBAAgB,EAAE;MACdC,WAAW,EAAEhB;IADC,CAHe;IAMjCiB,OAAO,EAAE,IANwB;IAOjCC,OAAO,EAAE;EAPwB,CAAf,CAAtB,CAFiD,CAYjD;;EACA,MAAMT,OAAO,CAACU,IAAR,CAAa,OAAO;IAAEC,IAAF;IAAQC;EAAR,CAAP,KAA0B;IACzC,MAAMC,GAAG,GAAG,MAAM,mCAAWF,IAAX,EAAiBC,IAAI,CAACE,IAAtB,CAAlB;IAEA,MAAM,uCAAeH,IAAf,EAAqBI,OAAO,CAACC,GAAR,CAAYC,OAAjC,EAA0CF,OAAO,CAACC,GAAR,CAAYE,OAAtD,EAA+DL,GAA/D,CAAN;IAEA,MAAM,wCAAgBF,IAAhB,EAAsBI,OAAO,CAACC,GAAR,CAAYG,OAAlC,EAA2CJ,OAAO,CAACC,GAAR,CAAYI,OAAvD,EAAgEP,GAAhE,EAAqED,IAAI,CAACS,OAA1E,CAAN,CALyC,CAOzC;;IACA,MAAMC,YAAGC,UAAH,CAAc7B,OAAO,GAAG,GAAV,GAAgBmB,GAA9B,CAAN;EAEH,CAVK,CAAN,CAbiD,CAyBjD;;EACAW,OAAO,CAACC,GAAR,CAAY,oBAAZ;;EACA,IAAI;IACA;IACA,MAAMb,IAAI,GAAGhB,GAAG,CAAC8B,IAAjB;IAEA,MAAM1B,OAAO,CAAC2B,OAAR,CAAgBf,IAAhB,CAAN;IAEAf,GAAG,CAAC+B,MAAJ,CAAWC,yBAAWC,QAAtB,EAAgCC,IAAhC,CAAqC;MAAEC,OAAO,EAAE;IAAX,CAArC;EAEH,CARD,CAQE,OAAOC,KAAP,EAAc;IACZnC,IAAI,CAACmC,KAAD,CAAJ;EACH,CAVD,SAUU;IACN,MAAMjC,OAAO,CAACkC,IAAR,EAAN;IACA,MAAMlC,OAAO,CAACmC,KAAR,EAAN;EACH;AACJ,CAzCM"}