{"version":3,"file":"errorHandler.js","names":["notFound","req","res","status","HttpStatus","NOT_FOUND","json","error","code","message","getStatusText","methodNotAllowed","METHOD_NOT_ALLOWED","bodyParser","err","next","logger","genericErrorHandler","stack"],"sources":["../../src/middlewares/errorHandler.js"],"sourcesContent":["import HttpStatus from 'http-status-codes';\n\nimport logger from '../utils/logger';\nimport buildError from '../utils/buildError';\n\n/**\n * Error response middleware for 404 not found.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function notFound(req, res) {\n  res.status(HttpStatus.NOT_FOUND).json({\n    error: {\n      code: HttpStatus.NOT_FOUND,\n      message: HttpStatus.getStatusText(HttpStatus.NOT_FOUND)\n    }\n  });\n}\n\n/**\n * Method not allowed error middleware. This middleware should be placed at\n * the very bottom of the middleware stack.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function methodNotAllowed(req, res) {\n  res.status(HttpStatus.METHOD_NOT_ALLOWED).json({\n    error: {\n      code: HttpStatus.METHOD_NOT_ALLOWED,\n      message: HttpStatus.getStatusText(HttpStatus.METHOD_NOT_ALLOWED)\n    }\n  });\n}\n\n/**\n * To handle errors from body parser for cases such as invalid JSON sent through\n * the body (https://github.com/expressjs/body-parser#errors).\n *\n * @param  {Object}   err\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nexport function bodyParser(err, req, res, next) {\n  logger.error(err.message);\n\n  res.status(err.status).json({\n    error: {\n      code: err.status,\n      message: HttpStatus.getStatusText(err.status)\n    }\n  });\n}\n\n/**\n * Generic error response middleware for validation and internal server errors.\n *\n * @param  {Object}   err\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nexport function genericErrorHandler(err, req, res, next) {\n  logger.error(err.stack);\n  const error = buildError(err);\n\n  res.status(error.code).json({ error });\n}\n"],"mappings":";;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;EACjCA,GAAG,CAACC,MAAJ,CAAWC,yBAAWC,SAAtB,EAAiCC,IAAjC,CAAsC;IACpCC,KAAK,EAAE;MACLC,IAAI,EAAEJ,yBAAWC,SADZ;MAELI,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWC,SAApC;IAFJ;EAD6B,CAAtC;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,gBAAT,CAA0BV,GAA1B,EAA+BC,GAA/B,EAAoC;EACzCA,GAAG,CAACC,MAAJ,CAAWC,yBAAWQ,kBAAtB,EAA0CN,IAA1C,CAA+C;IAC7CC,KAAK,EAAE;MACLC,IAAI,EAAEJ,yBAAWQ,kBADZ;MAELH,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWQ,kBAApC;IAFJ;EADsC,CAA/C;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,UAAT,CAAoBC,GAApB,EAAyBb,GAAzB,EAA8BC,GAA9B,EAAmCa,IAAnC,EAAyC;EAC9CC,gBAAOT,KAAP,CAAaO,GAAG,CAACL,OAAjB;;EAEAP,GAAG,CAACC,MAAJ,CAAWW,GAAG,CAACX,MAAf,EAAuBG,IAAvB,CAA4B;IAC1BC,KAAK,EAAE;MACLC,IAAI,EAAEM,GAAG,CAACX,MADL;MAELM,OAAO,EAAEL,yBAAWM,aAAX,CAAyBI,GAAG,CAACX,MAA7B;IAFJ;EADmB,CAA5B;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASc,mBAAT,CAA6BH,GAA7B,EAAkCb,GAAlC,EAAuCC,GAAvC,EAA4Ca,IAA5C,EAAkD;EACvDC,gBAAOT,KAAP,CAAaO,GAAG,CAACI,KAAjB;;EACA,MAAMX,KAAK,GAAG,yBAAWO,GAAX,CAAd;EAEAZ,GAAG,CAACC,MAAJ,CAAWI,KAAK,CAACC,IAAjB,EAAuBF,IAAvB,CAA4B;IAAEC;EAAF,CAA5B;AACD"}